// schema.prisma — CRM MVP models (v0.1) (полный, бизнес-поля восстановлены, чистый синтаксис без экранирования)

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// Энамы для ролей и этапов сделки
enum Role {
  OWNER
  MANAGER
  MARKETER
  VIEWER
  AGENCY
}

enum DealStage {
  NEW
  QUALIFIED
  PROPOSAL
  WON
  LOST
}

enum TimelineEventType {
  EMAIL
  CALL
  MEETING
  NOTE
  AI_SUMMARY
}

// Пользователи
model User {
  id           Int      @id @default(autoincrement())
  email        String   @unique
  passwordHash String
  name         String?
  role         Role     @default(VIEWER)
  timezone     String   @default("UTC")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  deals          Deal[]
  timelineEvents TimelineEvent[]
  auditLogs      AuditLog[]
}

// Лиды
model Lead {
  id        Int      @id @default(autoincrement())
  firstName String
  lastName  String?
  email     String?
  phone     String?
  source    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  contact          Contact?
  company          Company?          @relation(fields: [companyId], references: [id])
  companyId        Int?
  deals            Deal[]
  scoringSnapshots ScoringSnapshot[]
  consentLogs      ConsentLog[]
  timelineEvents   TimelineEvent[]
}

// Компании
model Company {
  id       Int     @id @default(autoincrement())
  name     String
  domain   String?
  industry String?
  size     String?

  // Relations
  contacts Contact[]
  leads    Lead[]
}

// Контакты
model Contact {
  id          Int      @id @default(autoincrement())
  lead        Lead     @relation(fields: [leadId], references: [id])
  leadId      Int      @unique
  company     Company? @relation(fields: [companyId], references: [id])
  companyId   Int?
  position    String?
  linkedinUrl String?
}

// Сделки
model Deal {
  id            Int       @id @default(autoincrement())
  title         String
  stage         DealStage @default(NEW)
  value         Decimal?  @db.Decimal(12, 2)
  currency      String?   @default("USD")
  closeProb     Float?    @default(0)
  expectedClose DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  owner          User            @relation(fields: [ownerId], references: [id])
  ownerId        Int
  lead           Lead?           @relation(fields: [leadId], references: [id])
  leadId         Int?
  timelineEvents TimelineEvent[]

  @@index([stage])
}

// История взаимодействий
model TimelineEvent {
  id        Int               @id @default(autoincrement())
  type      TimelineEventType
  payload   Json
  createdAt DateTime          @default(now())

  // Relations
  deal        Deal? @relation(fields: [dealId], references: [id])
  dealId      Int?
  lead        Lead? @relation(fields: [leadId], references: [id])
  leadId      Int?
  createdBy   User? @relation(fields: [createdById], references: [id])
  createdById Int?
}

// Скоринг лидов
model ScoringSnapshot {
  id          Int      @id @default(autoincrement())
  score       Int
  explanation String?
  createdAt   DateTime @default(now())

  // Relations
  leadId Int
  lead   Lead @relation(fields: [leadId], references: [id])
}

// Логи согласий GDPR
model ConsentLog {
  id         Int      @id @default(autoincrement())
  channel    String
  ip         String?
  sourceForm String?
  timestamp  DateTime @default(now())

  // Relations
  leadId Int
  lead   Lead @relation(fields: [leadId], references: [id])
}

// Аудит изменений
model AuditLog {
  id        Int      @id @default(autoincrement())
  entity    String
  entityId  Int
  action    String
  before    Json?
  after     Json?
  createdAt DateTime @default(now())

  // Relations
  userId Int?
  user   User? @relation(fields: [userId], references: [id])

  @@index([entity, entityId])
}
